#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        //zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        homerow: homerow {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <240>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <160>;
            hold-trigger-key-positions = <36 38 37 39 40 41>;
            hold-trigger-on-release;
        };

        index: index {
            compatible = "zmk,behavior-hold-tap";
            label = "INDEX";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
            hold-trigger-key-positions = <36 37 38 39 40 41>;
            tapping-term-ms = <180>;
            require-prior-idle-ms = <100>;
            quick-tap-ms = <300>;
        };

        thumb: thumb {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            quick-tap-ms = <300>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        TO_GAMING {
            bindings = <&tog 4>;
            key-positions = <37 38>;
        };
    };

    macros {
        select_line: select_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "SELECT_LINE";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        select_word: select_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
            label = "SELECT_WORD";
            wait-ms = <1>;
            tap-ms = <1>;
        };

        select_none: select_none {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
            label = "SELECT_NONE";
        };

        select_all: select_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A)>;
            label = "SELECT_ALL";
            wait-ms = <1>;
            tap-ms = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            label = "QWERTY";

            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X (GUI)  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  / (GUI)  | SHFT |
            //                          | LALT | SPC | SYM |   | FUNC / ENTER | SPC  | RALT |

            bindings = <
&kp GRAVE  &kp Q            &kp W            &kp E                    &kp R               &kp T              &kp Y           &kp U            &kp I             &kp O            &kp P               &kp BACKSLASH
&kp LCTRL  &homerow LGUI A  &homerow LALT S  &homerow LEFT_CONTROL D  &index LSHFT F      &kp G              &kp H           &index RSHIFT J  &homerow RCTRL K  &homerow RALT L  &homerow RGUI SEMI  &kp SQT
&kp LSHFT  &kp Z            &kp X            &kp C                    &kp V               &kp B              &kp N           &kp M            &kp COMMA         &kp DOT          &kp SLASH           &kp RSHFT
                                             &kp DEL                  &thumb 2 BACKSPACE  &thumb 1 ESCAPE    &thumb 2 ENTER  &thumb 1 SPACE   &kp TAB
            >;
        };

        symbol {
            label = "symbol";

            // -----------------------------------------------------------------------------------------
            // |  ESC |   1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |  DEL  |
            // | CTRL |   !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  `  |
            // | SHFT | snip |     |     |  _  |  -  |   |  +  |  [  |  ]  |  {  |  }  |  \  |
            //                     | LALT | SPC | SYM |   | FUNC / ENTER | SPC  | RALT |

            bindings = <
&kp EQUAL  &kp N1              &kp N2  &kp N3    &kp N4     &kp N5       &kp N6      &kp N7     &kp N8            &kp N9                 &kp N0    &kp MINUS
&kp LCTRL  &kp EXCL            &kp AT  &kp HASH  &kp DLLR   &kp PRCNT    &kp CARET   &kp AMPS   &kp STAR          &kp LPAR               &kp RPAR  &kp GRAVE
&kp LSHFT  &kp LG(LC(LS(N4)))  &trans  &trans    &kp UNDER  &kp MINUS    &kp LS(N9)  &kp LBKT   &kp LEFT_BRACKET  &kp LS(RIGHT_BRACKET)  &kp RBRC  &kp BSLH
                                       &trans    &kp SPACE  &trans       &trans      &kp SPACE  &trans
            >;
        };

        cursor {
            label = "cursor";

            // -----------------------------------------------------------------------------------------
            // | F1 |  F2  |  F3  |  F4  |  F5  |  F6  |   | PGUP  | PGDN |  Home   |  END  |    |       |
            // | F7 |  F8  |  F9  |  F10  |  F11  |  F12  |   | LEFT | UP  |  DWN  | RGHT  |   \   |   `   |
            // | SHFT |  BT0 |  BT1 |  BT2 | BT3 | BT CLR |   |    | <-   |  sk shift   |  ->  | CLOCK | CWORD |
            //                          | LALT | SPC | SYM |   | FUNC / ENTER | SPC  | RALT |

            bindings = <
&kp LC(K)  &sk LSHIFT   &kp LC(LS(Z))  &kp LC(Z)     &kp BACKSPACE  &kp LC(X)    &kp LC(X)     &kp LC(F)     &kp LC(LS(G))  &kp LC(G)  &sk RSHFT  &kp LC(K)
&kp LC(L)  &kp LGUI     &kp LALT       &kp LCTRL     &kp LSHFT      &kp LC(C)    &kp LC(C)     &kp LEFT      &kp UP         &kp DOWN   &kp RIGHT  &kp LC(L)
&kp LC(J)  &select_all  &select_line   &select_word  &select_none   &kp LC(V)    &kp LC(V)     &kp HOME      &sk PG_UP      &kp PG_DN  &kp END    &kp LC(J)
                                       &none         &none          &none        &select_line  &select_word  &select_none
            >;
        };

        Function {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "Func";
        };

        gaming_layer {
            label = "GAME";
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E    &kp R      &kp T              &kp Y           &kp U            &kp I             &kp O            &kp P               &kp BACKSLASH
&kp LCTRL  &kp A  &kp S  &kp D    &kp F      &kp G              &kp H           &index RSHIFT J  &homerow RCTRL K  &homerow RALT L  &homerow RGUI SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C    &kp V      &kp B              &kp N           &kp M            &kp COMMA         &kp DOT          &kp SLASH           &kp RSHFT
                         &kp DEL  &kp SPACE  &thumb 1 ESCAPE    &thumb 2 ENTER  &kp BACKSPACE    &kp TAB
            >;
        };

        symbol_r {
            bindings = <
&kp LBKT          &kp LS(N9)     &kp LS(LBKT)       &kp LS(RIGHT_BRACKET)  &kp LS(N0)      &kp RIGHT_BRACKET    &trans  &trans  &trans  &trans  &trans  &trans
&trans            &kp LS(N6)     &kp EQUAL          &kp LS(MINUS)          &kp LS(N4)      &trans               &trans  &trans  &trans  &trans  &trans  &trans
&kp LS(NUMBER_2)  &kp LS(COMMA)  &kp LS(BACKSLASH)  &kp MINUS              &kp LS(PERIOD)  &trans               &trans  &trans  &trans  &trans  &trans  &trans
                                                    &trans                 &trans          &trans               &trans  &trans  &trans
            >;
        };
    };
};
